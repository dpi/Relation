<?php

/**
 * Implements hook_block_info().
 */
function relation_dropzone_block_info() {
  return array(
    'dropzone' => array(
      'info' => t('Relation dropzone'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function relation_dropzone_block_view() {
  drupal_add_css(drupal_get_path('module', 'relation_dropzone') . '/relation_dropzone.css');

  $form = drupal_get_form('relation_dropzone');
  if (isset($form['entity_key'])) {
    return array(
      'subject' => t('Pick an entity'),
      'content' => $form,
    );
  }
  return array();
}

/**
 * Implements hook_entity_load().
 */
function relation_dropzone_entity_load($entities, $type) {
  $entities_store = &drupal_static('relation_entities', array());
  $enabled = &drupal_static(__FUNCTION__);
  // Recursion protection.
  if ($enabled === -1) {
    return;
  }
  if (!isset($enabled)) {
    $enabled = -1;
    drupal_theme_initialize();
    $block_info = _block_load_blocks();
    $enabled = FALSE;
    foreach ($block_info as $region => $blocks) {
      if (isset($blocks['relation_dropzone_dropzone'])) {
        $enabled = TRUE;
        break;
      }
    }
  }
  if ($enabled) {
    $entities_store += array($type => array());
    $entities_store[$type] += $entities;
  }
}

/**
 * The dropzone form.
 */
function relation_dropzone($form, &$form_state) {
  if ($relation_entities = drupal_static('relation_entities', array())) {
    foreach ($relation_entities as $entity_type => $entities) {
      foreach ($entities as $entity_id => $entity) {
        list( , , $entity_bundle) = entity_extract_ids($entity_type, $entity);
        $options["$entity_type:$entity_id"] = "$entity_bundle: " . entity_label($entity_type, $entity);
      }
    }
    $form_state['relation_entities_options'] = $options;
  }
  if (empty($form_state['relation_entities_options'])) {
    return $form;
  }
  $form['predicate'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Predicate'),
    '#description'   => 'Name of the relation',
    '#autocomplete_path' => 'relation/autocomplete/bundles',
    '#default_value' => isset($_SESSION['relation_predicate']) ? $_SESSION['relation_predicate'] : '',
    '#required'      => TRUE,
  );
  $form['entity_key'] = array(
    '#type'         => 'select',
    '#options'      => $form_state['relation_entities_options'],
    '#default_value' => '',
  );
  if (count($options) > 1) {
    $form['entity_key']['#empty_value'] = '';
    $form['entity_key']['#empty_option'] = t('Select an entity');
  }
  $form['pick'] = array(
    '#type' => 'submit',
    '#submit' => array('relation_dropzone_pick'),
    '#value' => t('Pick'),
  );
  $form['reload']['#prefix'] = '<span id="relation_dropzone_reload">';
  $form['reload']['#suffix'] = '</span>';
  if (!empty($_SESSION['relation_entity_keys'])) {
    $form['reload']['stored'] = _relation_stored_entity_keys_list();
    $form['reload']['save'] = array(
      '#type' => 'submit',
      '#value' => t('Create relation'),
      '#submit' => array('relation_dropzone_save'),
    );
    if (isset($_SESSION['relation_entity_keys'])) {
      $form['reload']['clear'] = array(
        '#type' => 'submit',
        '#value' => t('Clear'),
        '#submit' => array('relation_dropzone_clear'),
      );
    }
  }
  return $form;
}

/**
 * Helper to get a item_list render structure out of the entities in session.
 */
function _relation_stored_entity_keys_list() {
  $list = array();
  foreach ($_SESSION['relation_entity_keys'] as $entity_key) {
    // The structure is (entity_type, entity_id, entity label).
    $list[] = $entity_key['entity_key'];
  }
  return array(
    '#theme' => 'item_list',
    '#items' => $list,
  );
}

/**
 * Submit handler for the pick button.
 */
function relation_dropzone_pick($form, &$form_state) {
  if ($entity_key = $form_state['values']['entity_key']) {
    $form_state['values']['entity_key'] = '';
    // Here we get (entity_type, entity_id).
    $break = explode(':', $entity_key);
    // Add the label for later display. #options is check_plain'd but we need
    // to do that ourselves.
    $entity_key = check_plain($form['entity_key']['#options'][$entity_key]);
    $entity_key_array = explode(':', $entity_key, 2);
    $pick = array(
      'entity_type' => $break[0],
      'entity_id' => $break[1],
      'entity_bundle' => $entity_key_array[0],
      'entity_key' => $entity_key,
    );
    $_SESSION += array('relation_entity_keys' => array());
    $_SESSION['relation_entity_keys'][] = $pick;
    $_SESSION['relation_predicate'] = $form_state['values']['predicate'];
  }
}

/**
 * Validate form submission for the dropzone.
 */
function relation_dropzone_validate($form, &$form_state) {
  $predicate = $form_state['values']['predicate'];
  // May need some separate validation for "pick"
  if ($form_state['clicked_button']['#value']=='Create relation') {
    $errors = array();
    relation_validate($predicate, $_SESSION['relation_entity_keys'], $errors);
    foreach ($errors as $error) {
      form_set_error('predicate', $error);
    }
  }
}

/**
 * Submit handler for the save button.
 */
function relation_dropzone_save($form, $form_state) {
  if (isset($_SESSION['relation_predicate'])) {
    $predicate = $_SESSION['relation_predicate'];
    $rid = relation_create($predicate, $_SESSION['relation_entity_keys']);
    if ($rid) {
      $link = l($predicate, "relation/$rid");
      $list = drupal_render(_relation_stored_entity_keys_list());
      $message = t('Created new !link from !list', array('!link' => $link, '!list' => $list));
      drupal_set_message($message);
      relation_dropzone_clear($form, $form_state);
    }
    else {
    drupal_set_message('Relation not created', 'error');
    }
  }
}

/**
 * Submit handler for the clear button.
 */
function relation_dropzone_clear($form, $form_state) {
  unset($_SESSION['relation_predicate'], $_SESSION['relation_entity_keys']);
}

