<?php
/**
 * @file
 * Tests for Views support.
 */

/**
 * Functional test of Relation's integration with Views.
 */
class RelationViewsTestCase extends RelationTestCase {
  function getInfo() {
    return array(
      'name' => 'Relation Views test',
      'description' => 'Test the relation views support.',
      'group' => 'Relation',
    );
  }

  function setUp() {
    parent::setUp('relation', 'views');
  }

  /**
   * Test Symmetric relations.
   * Article 1 <--> Page 4
   */
  function testRelationViews() {
    $view = new view;

    $handler = $view->new_display('default');

    $handler->display->display_options['relationships']['relation_symmetric_node']['id'] = 'relation_symmetric_node';
    $handler->display->display_options['relationships']['relation_symmetric_node']['table'] = 'node';
    $handler->display->display_options['relationships']['relation_symmetric_node']['field'] = 'relation_symmetric_node';

    $handler->display->display_options['fields']['nid']['id'] = 'nid';
    $handler->display->display_options['fields']['nid']['table'] = 'node';
    $handler->display->display_options['fields']['nid']['field'] = 'nid';

    $handler->display->display_options['arguments']['nid']['id'] = 'nid';
    $handler->display->display_options['arguments']['nid']['table'] = 'node';
    $handler->display->display_options['arguments']['nid']['field'] = 'nid';
    $handler->display->display_options['arguments']['nid']['relationship'] = 'relation_symmetric_node';
    $view->set_arguments(array($this->node1->nid));
    $view->execute(); 
    $this->assertEqual(count($view->result), 1);
    $this->assertEqual($view->result[0]->nid, $this->node4->nid);

    for ($r_index = -1 ; $r_index < 2; $r_index++) {
      $view = new view;

      $handler = $view->new_display('default');

      $handler->display->display_options['relationships']['relation_directional_node']['id'] = 'relation_directional_node';
      $handler->display->display_options['relationships']['relation_directional_node']['table'] = 'node';
      $handler->display->display_options['relationships']['relation_directional_node']['field'] = 'relation_directional_node';
      $handler->display->display_options['relationships']['relation_directional_node']['required'] = 1;
      $handler->display->display_options['relationships']['relation_directional_node']['r_index'] = $r_index;

      $handler->display->display_options['fields']['nid']['id'] = 'nid';
      $handler->display->display_options['fields']['nid']['table'] = 'node';
      $handler->display->display_options['fields']['nid']['field'] = 'nid';

      $handler->display->display_options['arguments']['nid']['id'] = 'nid';
      $handler->display->display_options['arguments']['nid']['table'] = 'node';
      $handler->display->display_options['arguments']['nid']['field'] = 'nid';
      $handler->display->display_options['arguments']['nid']['relationship'] = 'relation_directional_node';
      $view->set_arguments(array($this->node3->nid));
      $view->execute();
      switch ($r_index) {
        case -1:
          $this->assertEqual(count($view->result), 2);
          $matches = array($this->node1->nid => TRUE, $this->node4->nid => TRUE);
          foreach ($view->result as $result) {
            unset($matches[$result->nid]);
          }
          $this->assertFalse($matches);
          break;
        case 0:
          // Here, because the argument is using the Views relation, it stands
          // on the opossite end of the relation and so this is backwards.
          $this->assertEqual(count($view->result), 1);
          $this->assertEqual($view->result[0]->nid, $this->node1->nid);
          break;
        case 1:
          $this->assertEqual(count($view->result), 1);
          $this->assertEqual($view->result[0]->nid, $this->node4->nid);
          break;
      }
    }
  }
}
