<?php

/**
 * @file
 * Tests for Relation module.
 */

/**
 * Relation helper class.
 */
class RelationTestCase extends DrupalWebTestCase {
  function setUp() {
    // Other modules will reuse this class, make sure to pass the arguments up.
    if (func_num_args()) {
      parent::setUp(func_get_args());
    }
    else {
      parent::setUp('relation');
    }
    $perms = array(
      'create article content',
      'create page content',
      'administer relation types',
      'create relations',
      'edit relations',
      'delete relations',
      );
    $web_user = $this->drupalCreateUser($perms);
    $this->drupalLogin($web_user);
  }

  function createRelationTypes() {
    $this->relation_types['symmetric'] = array(
      'predicate'   => $this->randomName(),
      'label' => $this->randomString(),
      'source_bundles' => array('node:article', 'node:page'),
    );
    $this->relation_types['directional'] = array(
      'predicate'   => $this->randomName(),
      'label' => $this->randomString(),
      'directional' => TRUE,
      'source_bundles' => array('node:article'),
      'target_bundles' => array('node:page'),
    );
    $this->relation_types['octopus'] = array(
      'predicate'   => $this->randomName(),
      'label' => $this->randomString(),
      'min_arity' => 2,
      'max_arity' => 8,
      'source_bundles' => array('node:article', 'node:page'),
    );
    foreach ($this->relation_types as $relation_type) {
      relation_type_save($relation_type);
    }
  }
}

/**
 * Test relation API.
 */
class RelationAPITestCase extends RelationTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Relation test',
      'description' => 'Test relations.',
      'group' => 'Relation',
    );
  }

  /**
   * Create some nodes, add some relations and check they are related.
   */
  function testRelationCRDMultiple() {
    $node1 = $this->drupalCreateNode(array('type' => 'article', 'promote' => 1));
    $node2 = $this->drupalCreateNode(array('type' => 'article', 'promote' => 1));
    $node3 = $this->drupalCreateNode(array('type' => 'article', 'promote' => 0));
    $node4 = $this->drupalCreateNode(array('type' => 'page', 'promote' => 0));

    $this->createRelationTypes();
    $errors = array();

    // create a symmetric relation
    $entity_keys = array(
      array(
        'entity_type' => 'node',
        'entity_id' => $node1->nid,
      ),
      array(
        'entity_type' => 'node',
        'entity_id' => $node4->nid,
      )
    );
    $predicate_symmetric = $this->relation_types['symmetric']['predicate'];
    $this->RelationSaveHelper($predicate_symmetric, $entity_keys);
    $relations = relation_query('node', $node4->nid)->execute();
    $count = count($relations);
    $this->assertEqual(count($relations), 1, $count . ' relation found, should be 1');
    $relation = reset($relations);
    $this->assertEqual($relation->entity_keys[0]['entity_id'], $node1->nid, 'Correct entity is related: ' . $relation->entity_keys[0]['entity_id'] . '==' . $node1->nid);
    $entity_keys[0]['entity_id'] = $node2->nid;
    $this->RelationSaveHelper($predicate_symmetric, $entity_keys);
    $this->drupalGet("admin/structure/relation/manage/$predicate_symmetric/delete");
    $this->assertRaw(t('The %label relation type is used by @count relations on your site. If you remove %label, you will not be able to edit %label relations and they may not display correctly.', array('%label' => $this->relation_types['symmetric']['label'], '@count' => 2)), 'Correct number of relations found');
  }

  function RelationSaveHelper($predicate, $entity_keys) {
    relation_validate($predicate, $entity_keys, $errors);
    if ($errors) {
      foreach ($errors as $error) {
        $this->fail($error);
      }
    }
    else {
      $this->pass('Validation passed');
    }
    $rid = relation_create($predicate, $entity_keys);
    $relation = relation_load($rid);
    $count = count($relation->entity_keys);
    $this->assertEqual($count, 2, 'There are two entities: ' . $count);
    $this->assertEqual($relation->arity, 2, 'Arity is 2: ' . $relation->arity);
    $this->assertEqual($relation->predicate, $predicate, 'Predicate is correct: ' . $relation->predicate);
    foreach ($entity_keys as $entity_key) {
      $need_ids[$entity_key['entity_id']] = TRUE;
    }
    foreach ($relation->entity_keys as $entity_key) {
      $this->assertEqual($entity_key['entity_type'], 'node', 'The entity type is node: ' . $entity_key['entity_type']);
      $this->assertTrue(isset($need_ids[$entity_key['entity_id']]), 'The entity ID is correct: ' . $need_ids[$entity_key['entity_id']]);
      unset($need_ids[$entity_key['entity_id']]);
    }
    $this->assertFalse($need_ids, 'All ids found');
  }
}
