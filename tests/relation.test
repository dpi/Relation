<?php

/**
 * @file
 * Tests for Relation module.
 */

/**
 * Test relation.
 */
class RelationTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Relation test',
      'description' => 'Test relations.',
      'group' => 'Relation',
    );
  }

  function setUp() {
    parent::setUp('relation');
    $web_user = $this->drupalCreateUser(array('create article content', 'create page content'));
    $this->drupalLogin($web_user);
  }

  /**
   * Create some nodes, add some relatand check they are related.
   */
  function testNodeMultipleLoad() {
    $node1 = $this->drupalCreateNode(array('type' => 'article', 'promote' => 1));
    $node2 = $this->drupalCreateNode(array('type' => 'article', 'promote' => 1));
    $node3 = $this->drupalCreateNode(array('type' => 'article', 'promote' => 0));
    $node4 = $this->drupalCreateNode(array('type' => 'page', 'promote' => 0));
    $predicate = $this->randomName();
    $relation_type = array(
      'predicate'   => $predicate,
      'label' => $this->randomString(),
      'source_bundles' => array('node:article', 'node:page'),
    );
    relation_type_save($relation_type);
    $errors = array();
    $entity_keys = array(
      array(
        'entity_type' => 'node',
        'entity_id' => $node1->nid,
      ),
      array(
        'entity_type' => 'node',
        'entity_id' => $node4->nid,
      )
    );
    relation_validate($predicate, $entity_keys, $errors);
    if ($errors) {
      foreach ($errors as $error) {
        $this->fail($error);
      }
    }
    else {
      $this->pass('Validation passed');
    }
    $relation_id = relation_create($predicate, $entity_keys);
    $relation = relation_load($relation_id);
    $this->assertEqual(count($relation->entity_keys), 2, 'There are two entities');
    $this->assertEqual($relation->arity, 2, 'Arity is 2.');
    $this->assertEqual($relation->predicate, $predicate, 'Predicate is correct');
    $need_ids = array_flip(array($node1->nid, $node4->nid));
    foreach ($relation->entity_keys as $entity_key) {
      $this->assertEqual($entity_key['entity_type'], 'node', 'The entity type is node.');
      $this->assertTrue(isset($need_ids[$entity_key['entity_id']]), 'The entity ID is correct');
      unset($need_ids[$entity_key['entity_id']]);
    }
    $this->assertFalse($need_ids, 'All ids found');
  }
}
