<?php

/**
 * @file
 * Describes relations between entities.
 */

/**
 * Implements hook_entity_info().
 */
function relation_entity_info() {
  $entities['relation'] = array(
    'label' => t('Relation'),
    'base table' => 'relation',
    'fieldable' => FALSE,
    'controller class' => 'RelationEntityController',
    'entity keys' => array(
      'id' => 'relation_id',
      'bundle' => 'predicate',
    ),
    'bundle keys' => array(
      'bundle' => 'predicate',
    ),
    'bundles' => array(),
    'view modes' => array(),
  );
  foreach (db_query('SELECT predicate, label, directional, transitive, min_arity, max_arity FROM {relation_type}') as $record) {
    $entities['relation']['bundles'][$record->predicate] = array(
      'label' => $record->label ? $record->label : $record->predicate,
      'directional' => $record->directional,
      'transitive' => $record->transitive,
      'min_arity' => $record->min_arity,
      'max_arity' => $record->max_arity,
    );
  }
  foreach (db_query('SELECT predicate, entity_type, bundle, r_index FROM {relation_bundles}') as $record) {
    $endpoint = $record->r_index ? 'target_bundles' : 'source_bundles';
    $entities['relation']['bundles'][$record->predicate][$endpoint][] = array(
      'entity_type' => $record->entity_type,
      'bundle'      => $record->bundle,
    );
  }
  return $entities;
}

/**
 * Implements hook_permission().
 */
function relation_permission() {
  return array(
    'administer relation' => array(
      'title' => t('Administer Relations'),
      'description' => t('Perform administration tasks for relations.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function relation_menu() {
  $items['relation/%relation'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'relation_page',
    'page arguments' => array(1),
  );
  $items['admin/structure/relation'] = array(
    'title' => 'Relation',
    'access arguments' => array('administer relation'),
    'page callback' => 'relation_list',
    'file' => 'relation.admin.inc',
  );
  $items['admin/structure/relation/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/relation/add'] = array(
    'title' => 'Add',
    'access arguments' => array('administer relation'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('relation_config_page'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'relation.admin.inc',
  );
  $items['admin/structure/relation/edit/%'] = array(
    'title' => 'Edit relation type',
    'access arguments' => array('administer relation'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('relation_config_page', 4),
    'type' => MENU_CALLBACK,
    'file' => 'relation.admin.inc',
  );
  $items['relation/autocomplete/bundles'] = array(
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'page callback' => 'relation_predicate_autocomplete',
  );
  return $items;
}

/**
 * Saves a relation bundle.
 *
 * @param $record
 *   Array containing:
 *   - predicate: Relation type machine name (string).
 *   - label: Relation type human-readable name (string).
 *   - directional: whether relation is directional (boolean) .
 *   - transitive: whether relation is transitive (boolean).
 *   - min_arity: minimum number of entities in relations of this type (int>=2).
 *   - max_arity: maximum number of entities in relations of this type (int>=min_arity).
 *   - source_bundles: array containing allowed bundle keys. This is used for
 *     both directional and non-directional relations. Bundle key arrays are
 *     made up of of the form 'entity:bundle', eg. 'node:article'.
 *   - target_bundles: array containing arrays allowed target bundle keys.
 *     This is the same format as source_bundles, but is only used for
 *     directional relations.
 * @param $write_record_keys
 *   Array containing the primary key of the relation ('predicate'), if we are
 *   updating a relation, or an empty array if we are creating a new relation.
 */
function relation_type_save($record, $write_record_keys = array()) {
  $record += array(
    'min_arity' => 2,
    'max_arity' => 2,
    'directional' => FALSE,
    'transitive' => FALSE,
  );
  $source_bundles = $record['source_bundles'];
  if ($record['directional']) {
    $target_bundles = $record['target_bundles'];
  }
  unset($record['source_bundles'], $record['target_bundles']);
  $predicate = $record['predicate'];
  $transaction = db_transaction();
  drupal_write_record('relation_type', $record, $write_record_keys);
  db_delete('relation_bundles')->condition('predicate', $predicate)->execute();
  $query = db_insert('relation_bundles')->fields(array('predicate', 'entity_type', 'bundle', 'r_index'));
  foreach ($source_bundles as $entity_bundles) {
    list($entity_type, $bundle) = explode(':', $entity_bundles, 2);
    $query->values(array($predicate, $entity_type, $bundle, 0));
  }
  if ($record['directional']) {
    foreach ($target_bundles as $entity_bundles) {
      list($entity_type, $bundle) = explode(':', $entity_bundles, 2);
      $query->values(array($predicate, $entity_type, $bundle, 1));
    }
  }
  $query->execute();
  entity_info_cache_clear();
}

/**
 * Loads a relation type (bundle).
 *
 * @param $predicate
 *   The relation type (bundle) of the relation to be created.
 * @return
 *   A relation type record in the same format as expected by
 *   relation_type_save().
 */
function relation_type_load($predicate) {
  $relation_type = db_query('SELECT predicate, label, directional, transitive, min_arity, max_arity FROM {relation_type} WHERE predicate = :predicate', array(':predicate' => $predicate))->fetchObject();
  if ($relation_type) {
    $relation_type->source_bundles = array();
    $relation_type->target_bundles = array();
    foreach (db_query('SELECT predicate, entity_type, bundle, r_index  FROM {relation_bundles} WHERE predicate = :predicate', array(':predicate' => $predicate)) as $record) {
      $endpoint = $record->r_index ? 'target_bundles' : 'source_bundles';
      $relation_type->{$endpoint}[] = "$record->entity_type:$record->bundle";
    }
  }
  return $relation_type;
}

/**
 * Loads a relation from a relation_id.
 *
 * @param $relation_id
 *   Numerical relation_id of the relation to be loaded.
 *
 * @return
 *   Loaded relation object. Relation objects are stdClass Object of the form:
 *   - relation_id: numeric relation_id.
 *   - predicate: relation bundle machine name.
 *   - arity: the number of entities in the relation
 *   - rdf_mapping: not yet implemented (empty array)
 *   - entity_keys: Array of keys for entities that make up the relation.
 *     Keys are arrays are of the form:
 *     - entity_type: The type of the entity (eg. node).
 *     - entity_id: Numeric entity ID.
 *     - r_index: Numeric index of the entity in the relation. Always 0 for
 *       non-directional relations, in directional relations this is 0 for
 *       source entities, and 1 for target entities.
 */
function relation_load($relation_id) {
  return reset(relation_multiple_load(array($relation_id)));
}

/**
 * Loads a set of relations from an array of relation_ids.
 *
 * @param $relation_ids
 *   Array of numerical relation_ids of the relations to be loaded.
 *
 * @return
 *   Associative array of loaded relation objects, keyed by relation_id.
 *
 * @see relation_load()
 */
function relation_multiple_load($relation_ids) {
  // Entity load handles field_attach_load for us.
  return entity_load('relation', $relation_ids);
}

/**
 * Relation display page. Currently only displays related entities.
 *
 * @TODO: implement directionality, possibly give more details on entities?
 */
function relation_page($relation) {
  foreach ($relation->entity_keys as $r_index => $entity_key) {
    $entities = entity_load($entity_key['entity_type'], array($entity_key['entity_id']));
    $entity = $entities[$entity_key['entity_id']];
    $label = entity_label($entity_key['entity_type'], $entity);
    $uri = entity_uri($entity_key['entity_type'], $entity);
    $items[$r_index] = l($label, $uri['path'], $uri['options']);
  }
  $build['link_list'] = array(
    '#theme' => 'item_list',
    '#items' => $items,
  );
  return $build;
}

/**
 * Controller class for entity relations.
 *
 * This extends the DrupalDefaultEntityController class. The buildQuery method
 * is overriden to add the self join and to exclude rows where the left and
 * right entities are identical.
 */
class RelationEntityController extends DrupalDefaultEntityController {

  /**
   * Adds related entity data to relation. Each entity is saved as an
   * (entity_type, entity_id, r_index) triple.
   */
  protected function attachLoad(&$queried_entities, $revision_id = FALSE) {
    parent::attachLoad($queried_entities, $revision_id);
    foreach ($queried_entities as $id => $entity) {
      $query = db_select('relation', 'r');
      $query->condition('r.relation_id', $id);
      $query->innerJoin('relation_data', 'rd', 'r.relation_id = rd.relation_id');
      $query->addField('r', 'relation_id');
      $query->addField('r', 'predicate');
      $query->addField('rd', 'entity_type', 'entity_type');
      $query->addField('rd', 'entity_id', 'entity_id');
      $query->addField('rd', 'r_index', 'r_index');
      $results = $query->execute();
      $rows = $results->fetchAll();
      foreach ($rows as $row) {
        $queried_entities[$id]->entity_keys[$row->r_index] = array(
          'entity_type' => $row->entity_type,
          'entity_id' => $row->entity_id,
          'r_index' => $row->r_index,
        );
      }
    }
  }
}

/**
 * Interface for relation handlers.
 */
interface RelationInterface {
  // bangpound
  public function getRelated($entity, $type);

  // becw
  function init($left, $right); // sets types
  function set_left($entity_ids = array()); // sets left objects
  function set_right($entity_ids = array()); // sets right objects
  function get_left(); // returns left
  function get_right(); // returns right
}

/**
 * Handler class for entity relations.
 */
class RelationHandler implements RelationInterface {

  function __construct() {
  }

  /**
   * Entity is a fully loaded entity (node, user, term, etc.)
   * Type is the predicate.
   */
  public function getRelated($entity, $type) {
    return NULL;
  }

  function init($left, $right) {
  }

  function set_left($entity_ids = array()) {
  }

  function set_right($entity_ids = array()) {
  }

  function get_left() {
  }

  function get_right() {
  }
}

/**
 * Creates a relation.
 *
 * @param $predicate
 *   The relation type (bundle) of the relation to be created.
 * @param $entity_keys
 *   A list of (entity_type, entity_id) pairs.
 *
 * @return
 *   The new relation id.
 */
function relation_create($predicate, $entity_keys) {
  $relation_id = db_insert('relation')
    ->useDefaults(array('relation_id'))
    ->fields(array('predicate' => $predicate, 'arity' => count($entity_keys)))
    ->execute();
  $query = db_insert('relation_data')
    ->fields(array('relation_id', 'entity_type', 'entity_id', 'r_index'));
  foreach ($entity_keys as $index => $entity_key) {
    $query->values(array($relation_id, $entity_key['entity_type'], $entity_key['entity_id'], $index));
  }
  $query->execute();
  return $relation_id;
}

/**
 * Validates relations against relation bundle settings.
 *
 * @param $predicate
 *   Relation type machine name (predicate).
 * @param $entity_keys
 *   An array of entity key arrays of the form:
 *   - entity_type: type of the entity to be added to the relation (eg. node)
 *   - entity_id: numerical id of the entity to be added to the relation.
 *   - r_index: integer index of the entity to be added. This should be zero if
 *     the relation is non-directional.
 * @param $error
 *   Array of errors to be filled in, passed by reference.
 */
function relation_validate($predicate, $entity_keys, &$errors) {
  $relation_type = db_query('SELECT directional, min_arity, max_arity FROM {relation_type} WHERE predicate = :predicate', array(':predicate' => $predicate))->fetchObject();
  // Check that predicate exists.
  if (!$relation_type) {
    $errors[] = t("The !predicate relation type does not exist!", array('!predicate' => $predicate));
  }
  // Check that arity is within acceptable bounds.
  if (count($entity_keys) < $relation_type->min_arity) {
    $errors[] = t("Relation has too few end points (:predicate min arity :min_arity)", array(':predicate' => $predicate, ':min_arity' => $relation_type->min_arity));
  }
  if (count($entity_keys) > $relation_type->max_arity) {
    $errors[] = t("Relation has too many end points (:predicate max arity :max_arity)", array(':predicate' => $predicate, ':min_arity' => $relation_type->max_arity));
  }
  //Check that each entity is has acceptable bundle type and index.
  $relation_bundles = relation_get_bundles($predicate);
  foreach ($entity_keys as $entity_key) {
    $acceptable = FALSE;
    // This is the only way have to get bundles from entity type and id as the
    // entity info is about the loaded entity not some database columns.
    $entities = entity_load($entity_key['entity_type'], array($entity_key['entity_id']));
    $entity = $entities[$entity_key['entity_id']];
    list(, , $entity_bundle) = entity_extract_ids($entity_key['entity_type'], $entity);
    $direction = isset($entity_key['r_index']) ? $entity_key['r_index'] : 0;
    $endpoint =  ($direction > 0) ? 'target' : 'source';
    foreach ($relation_bundles[$endpoint . '_bundles'] as $relation_bundle) {
      if (($entity_key['entity_type'] == $relation_bundle['entity_type']) && ($entity_bundle == $relation_bundle['bundle'])) {
        $acceptable = TRUE;
        break;
      }
    }
    if (!$acceptable) {
      $endpoint = $relation_type->directional ? $endpoint . ' endpoints' : 'an endpoint';
      $errors[] = t("The <em>:predicate</em> relation type does not allow :bundle entities as $endpoint.", array(':predicate' => $predicate, ':bundle' => $entity_bundle));
    }
  }
}

/**
 * Autocomplete page for listing bundles.
 */
function relation_predicate_autocomplete($string='') {
  $sql = "SELECT predicate, label FROM {relation_type} WHERE lower(predicate) LIKE lower('%" . $string . "%')";

  $resource = db_query($sql);
  $results = array();
  foreach ($resource as $row) {
    $results[$row->predicate] = $row->label;
  }
  print drupal_json_encode($results);
  exit();
}

/**
 * Helper query to get all relations tied to an entity.
 *
 * @param $entity_type
 *   The type of the entity (eg. node).
 * @param $entity_id
 *   The numerical entity id.
 * @param $predicates
 *   Array of relation types to look for.
 * @param $index
 *   The index of the entity in the relation, ie. for finding only relations
 *   for which the given entity is a target endpoint.
 *
 * @return
 *   Array of relation entity objects (which contain all the entities that they
 *   relate). Array is empty if no relations are found.
 */
function relation_get_relations($entity_type, $entity_id, $predicates = array(), $index = NULL) {
  $query = db_select('relation_data', 'rd');
  $query->addField('r', 'relation_id');
  $query->innerJoin('relation', 'r', 'r.relation_id = rd.relation_id');
  $query->condition('rd.entity_id', $entity_id);
  if ($predicates) {
    $query->condition('r.predicate', $predicates);
  }
  if (isset($index)) {
    $query->condition('rd.index', $index);
  }
  $relation_ids = $query->execute()->fetchCol();
  return $relation_ids ? entity_load('relation', $relation_ids) : array();
}

/**
 * Helper query to get all bundles available to relation.
 *
 * @param $predicate
 *   Machine name of the relation.
 *
 * @return
 *   An array with two sub-arrays, for source and target bundles. If relation
 *   is non-directional, all bundles are returned in 'source_bundles'.
 */
function relation_get_bundles($predicate) {
  $entity_info = entity_get_info('relation');
  return $entity_info['bundles'][$predicate];
}
