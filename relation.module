<?php

/**
 * @file
 * Describes relations between entities.
 */

/**
 * Implements hook_entity_info().
 */
function relation_entity_info() {
  $entities['relation'] = array(
    'label' => t('Relation'),
    'base table' => 'relation',
    'fieldable' => FALSE,
    'controller class' => 'RelationEntityController',
    'entity keys' => array(
      'id' => 'relation_id',
      'bundle' => 'predicate',
    ),
    'bundle keys' => array(
      'bundle' => 'predicate',
    ),
    'bundles' => array(),
    'view modes' => array(),
  );
  foreach (db_query('SELECT predicate FROM {relation_settings}') as $record) {
    $entities['relation']['bundles'][$record->predicate] = array(
      'label' => $record->predicate,

    );
  }
  return $entities;
}

/**
 * Implements hook_permission().
 */
function relation_permission() {
  return array(
    'administer relation' => array(
      'title' => t('Administer Relations'),
      'description' => t('Perform administration tasks for relations.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function relation_menu() {
  $items['relation/%relation'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'relation_page',
    'page arguments' => array(1),
  );
  $items['admin/structure/relation/add'] = array (
    'title' => 'Add relation',
    'access arguments' => array('administer relation'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('relation_config_page'),
  );
  $items['admin/structure/relation/edit/%'] = array(
    'title' => 'Relation',
    'access arguments' => array('administer relation'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('relation_config_page', 4),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Relation settings page, proof of concept, most will need to be moved
 * to relation bundle settings pages.
 */
function relation_config_page($form, $form_state, $predicate = NULL) {
  if ($predicate) {
    $relation_type = db_query('SELECT * FROM {relation_settings} WHERE predicate = :predicate', array(':predicate' => $predicate))->fetchObject();
    if ($relation_type) {
      foreach (db_query('SELECT entity_type, bundle FROM {relation_bundles} WHERE predicate = :predicate', array(':predicate' => $predicate)) as $record) {
        $relation_type->bundles[] = "$record->entity_type:$record->bundle";
      }
    }
  }
  if (empty($relation_type)) {
    $relation_type = (object) array('predicate' => '', 'bundles' => array(), 'directional' => FALSE);
  }
  if ($relation_type->predicate) {
    $form['predicate'] = array(
      '#type'  => 'value',
      '#value' => $relation_type->predicate,
    );
    $form['_predicate']['#markup'] = t('Relation name: %predicate', array(':predicate' => $relation_type->predicate));
  }
  else {
    $form['predicate'] = array(
      '#type'          => 'textfield',
      '#title'         => 'Predicate',
      '#description'   => 'Name of the relation',
      '#default_value' => $relation_type->predicate,
      '#required'      => TRUE,
    );
  }
  $bundles = array();
  $counter = 0;
  foreach (module_invoke_all('entity_info') as $entity_type => $entity) {
    if (isset($entity['bundles'])) {
      foreach ($entity['bundles'] as $bundle_id => $bundle) {
        $bundles[$entity_type]["$entity_type:$bundle_id"] = $bundle['label'];
        $counter++;
      }
    }
    else {
      $bundles[$entity_type]["$entity_type:$entity_type"] = $entity['label'];
        $counter++;
    }
  }
  $form['bundles'] = array(
    '#type'          => 'select',
    '#title'         => 'Available bundles',
    '#options'       => $bundles,
    '#size'          => max(12, $counter),
    '#default_value' => $relation_type->bundles,
    '#multiple'      => TRUE,
    '#description'   => 'Bundles that are not selected will not be available as end points for relations. Ctrl+click to select multiple.',
    '#required'      => TRUE,
  );
  $form['directional'] = array(
    '#type'           => 'checkbox',
    '#title'          => 'Directional?',
    '#default_value'  => $relation_type->directional,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save')
  );
  return $form;
}

/**
 * Submit data from settings page.
 */
function relation_config_page_submit($form, &$form_state) {
  $predicate = $form_state['values']['predicate'];
  $record = array(
    'predicate'   => $predicate,
    'directional' => $form_state['values']['directional'],
  );
  $transaction = db_transaction();
  drupal_write_record('relation_settings', $record, $form['predicate']['#type'] == 'value' ? 'predicate' : array());
  db_delete('relation_bundles')->condition('predicate', $predicate)->execute();
  $query = db_insert('relation_bundles')->fields(array('predicate', 'entity_type', 'bundle'));
  foreach ($form_state['values']['bundles'] as $entity_bundles) {
    list($entity_type, $bundle) = explode(':', $entity_bundles, 2);
    $query->values(array($predicate, $entity_type, $bundle));
  }
  $query->execute();
  $form_state['redirect'] = "admin/structure/relation/edit/$predicate";
}

function relation_load($relation_id) {
  return reset(entity_load('relation', array($relation_id)));
}

function relation_page($relation) {
  $left_entity = reset(entity_load($relation->left_entity_type, array($relation->left_entity_id)));
  $left_uri = entity_uri($relation->left_entity_type, $left_entity);
  $right_entity = reset(entity_load($relation->right_entity_type, array($relation->right_entity_id)));
  $right_uri = entity_uri($relation->right_entity_type, $right_entity);
  $build['link_list'] = array(
    '#theme' => 'item_list',
    '#items' => array(
      l(entity_label($relation->left_entity_type, $left_entity), $left_uri['path'], $left_uri['options']),
      l(entity_label($relation->right_entity_type, $right_entity), $right_uri['path'], $right_uri['options']),
    ),
  );
  return $build;
}

/**
 * Controller class for entity relations.
 *
 * This extends the DrupalDefaultEntityController class. The buildQuery method
 * is overriden to add the self join and to exclude rows where the left and
 * right entities are identical.
 */
class RelationEntityController extends DrupalDefaultEntityController {
  protected function buildQuery($ids, $conditions = array(), $revision_id = FALSE) {
    $query = parent::buildQuery($ids, $conditions, $revision_id);
    _relation_entity_query_helper($query);
    return $query;
  }
}

function _relation_entity_query_helper($query) {
  $query->innerJoin('relation_data', 'l', 'base.relation_id = l.relation_id');
  $query->innerJoin('relation_data', 'r', 'base.relation_id = r.relation_id AND NOT (l.entity_type = r.entity_type AND l.entity_id = r.entity_id)');
  $query->addField('base', 'relation_id');
  $query->addField('base', 'predicate');
  $query->addField('l', 'entity_type', 'left_entity_type');
  $query->addField('l', 'entity_id', 'left_entity_id');
  $query->addField('r', 'entity_type', 'right_entity_type');
  $query->addField('r', 'entity_id', 'right_entity_id');
}

/**
 * Interface for relation handlers.
 */
interface RelationInterface {
  // bangpound
  public function getRelated($entity, $type);

  // becw
  function init($left, $right); // sets types
  function set_left($entity_ids = array()); // sets left objects
  function set_right($entity_ids = array()); // sets right objects
  function get_left(); // returns left
  function get_right(); // returns right
}

/**
 * Handler class for entity relations.
 */
class RelationHandler implements RelationInterface {

  function __construct() {
  }

  /**
   * Entity is a fully loaded entity (node, user, term, etc.)
   * Type is the predicate.
   */
  public function getRelated($entity, $type) {
    return NULL;
  }

  function init($left, $right) {
  }

  function set_left($entity_ids = array()) {
  }

  function set_right($entity_ids = array()) {
  }

  function get_left() {
  }

  function get_right() {
  }
}
/**
 * Create a relation.
 *
 * @param $entity_keys
 *   A list of (entity_type, entity_id) pairs.
 * @return
 *   The new relation id.
 */
function relation_create($entity_keys) {
  $relation_id = db_insert('relation')->useDefaults(array('relation_id'))->execute();
  $query = db_insert('relation_data')
    ->fields(array('relation_id', 'entity_type', 'entity_id'));
  foreach ($entity_keys as $entity_key) {
    $query->values(array($relation_id, $entity_key[0], $entity_key[1]));
  }
  $query->execute();
  return $relation_id;
}

/**
 * Implements hook_block_info().
 */
function relation_block_info() {
  return array(
    'dropzone' => array(
      'info' => t('Relation block'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function relation_block_view() {
  $form = drupal_get_form('relation_dropzone');
  if (isset($form['entity_key'])) {
    return array(
      'subject' => t('Pick an entity'),
      'content' => $form,
    );
  }
  return array();
}

/**
 * The dropzone form.
 */
function relation_dropzone($form) {
  $options = array();
  foreach (drupal_static('relation_entities', array()) as $entity_type => $entities) {
    foreach ($entities as $entity_id => $entity) {
      $options["$entity_type:$entity_id"] = "$entity_type: " . entity_label($entity_type, $entity);
    }
  }
  if ($options) {
    $form['entity_key'] = array(
      '#type'         => 'select',
      '#options'      => $options,
    );
    if (count($options) > 1) {
      $form['entity_key']['#empty_value'] = '';
      $form['entity_key']['#empty_option'] = t('Select an entity');
    }
    $form['pick'] = array(
      '#type' => 'submit',
      '#submit' => array('relation_dropzone_pick'),
      '#value' => t('Pick'),
    );
    if (!empty($_SESSION['stored_entity_keys'])) {
      $list = array();
      foreach ($_SESSION['stored_entity_keys'] as $entity_key) {
        // The structure is (entity_type, entity_id, entity label).
        $list[] = $entity_key[2];
      }
      $form['stored'] = array(
        '#theme' => 'item_list',
        '#items' => $list,
      );
      $form['save'] = array(
        '#type' => 'submit',
        '#value' => t('Create relation'),
        '#submit' => array('relation_dropzone_save'),
      );
      if (isset($_SESSION['stored_entity_keys'])) {
        $form['clear'] = array(
          '#type' => 'submit',
          '#value' => t('Clear'),
          '#submit' => array('relation_dropzone_clear'),
        );
      }
    }
  }
  return $form;
}

/**
 * Submit handler for the pick button.
 */
function relation_dropzone_pick($form, $form_state) {
  if ($entity_key = $form_state['values']['entity_key']) {
    // Here we get (entity_type, entity_id).
    $pick = explode(':', $entity_key);
    // Add the label for later display. #options is check_plain'd but we need
    // to do that ourselves.
    $pick[] = check_plain($form['entity_key']['#options'][$entity_key]);
    $_SESSION += array('stored_entity_keys' => array());
    $_SESSION['stored_entity_keys'][] = $pick;
  }
}

/**
 * Submit handler for the save button.
 */
function relation_dropzone_save($form, $form_state) {
  relation_dropzone_pick($form, $form_state);
  if (isset($_SESSION['stored_entity_keys'])) {
    relation_create($_SESSION['stored_entity_keys']);
    unset($_SESSION['stored_entity_keys']);
  }
}

/**
 * Submit handler for the clear button.
 */
function relation_dropzone_clear($form, $form_state) {
  unset($_SESSION['stored_entity_keys']);
}

/**
 * Implements hook_entity_load().
 */
function relation_entity_load($entities, $type) {
  $entities_store = &drupal_static('relation_entities', array());
  $enabled = &drupal_static(__FUNCTION__);
  // Recursion protection.
  if ($enabled === -1) {
    return;
  }
  if (!isset($enabled)) {
    $enabled = -1;
    drupal_theme_initialize();
    $block_info = _block_load_blocks();
    $enabled = FALSE;
    foreach ($block_info as $region => $blocks) {
      if (isset($blocks['relation_dropzone'])) {
        $enabled = TRUE;
        break;
      }
    }
  }
  if ($enabled) {
    $entities_store += array($type => array());
    $entities_store[$type] += $entities;
  }
}
